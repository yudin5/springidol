<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-init-method="turnOnLights"
       default-destroy-method="turnOffLights">
       <!--default-autowire="byType">-->
    <!--<context:annotation-config /-->
    <!--<context:component-scan-->
            <!--base-package="springidol">-->
    <!--</context:component-scan>-->
    <!--<aop:aspectj-autoproxy />-->

    <!--Инструменты-->
    <!--Саксофон для автоматического связывания (по имени и не только) -->
    <bean id="saxophone"
          class="springidol.Saxophone"
          primary="true" />

    <bean id="piano"
          class="springidol.Piano"
          autowire-candidate="false" />

    <!--Здесь должны находиться объявления компонентов-->
    <bean id="duke" class="springidol.PoeticJuggler">
        <!--<constructor-arg value="15"/>-->
        <!--<constructor-arg value="#{T(java.lang.Math).random()*15}" />-->
        <constructor-arg value="#{T(java.lang.Math).random()*15 + 1}" />
        <constructor-arg ref="poemMarshak" />
    </bean>

    <bean id="kenny"
          class="springidol.Instrumentalist"
    autowire="byType"> <!--Инструмент внедряется через @Autowired -->
        <property name="song" value="Jingle Bells" />
        <!--<property name="song" value="Jingle Bells" />-->
        <!--<property name="instrument" ref="saxophone"/>-->
            <!--<bean class="springidol.Saxophone" />-->
        <!--</property>-->
    </bean>

    <bean id="carl"
          class="springidol.Instrumentalist">
        <property name="song" value="#{kenny.song}" />
        <!--<property name="song" value="Some song" />-->
        <property name="instrument" ref="piano" />
        <!--<property name="instrument" value="#{kenny.instrument}" />-->
    </bean>

    <!--Создадим абстрактный родительский класс для саксофонистов-->
    <bean id="baseSaxophonist"
          class="springidol.Instrumentalist"
          abstract="true">
        <property name="instrument" ref="saxophone" />
        <property name="song" value="Mama mia" />
    </bean>

    <!--Создадим наследника от родительского класса-->
    <bean id="frank" parent="baseSaxophonist" />
    <!--Создадим наследника от родительского класса и переопределим наследуемое свойство-->
    <bean id="lora" parent="baseSaxophonist">
        <property name="song" value="Mary had a little lamb" />
    </bean>

    <bean id="hank"
          class="springidol.OneManBand">
        <property name="instruments">
            <!--<list>-->
                <!--<ref bean="piano" />-->
                <!--<ref bean="saxophone" />-->
                <!--<ref bean="saxophone" />-->
            <!--</list>-->
            <!--<map>-->
                <!--<entry key="klavesin" value-ref="piano" />-->
                <!--<entry key="fortepiano" value-ref="piano" />-->
                <!--<entry key="sax" value-ref="saxophone" />-->
            <!--</map>-->
            <props>
                <prop key="GUITAR">Strum strum strum</prop>
                <prop key="CYMBAL">Crash crash crash</prop>
                <prop key="HARMONICA">Hum hum hum</prop>
            </props>
        </property>
    </bean>

    <bean id="poemMarshak"
          class="springidol.PoemMarshak"/>

    <bean id="theStage"
          class="springidol.Stage"
          factory-method="getInstance" />

    <bean id="auditorium"
          class="springidol.Auditorium"/>
          <!--init-method="turnOnLights"-->
          <!--destroy-method="turnOffLights" />-->

    <!--<bean class="springidol.Guitar" />-->

    <!--То, что не может Java. Создаем родительский абстрактный компонент-->
    <bean id="basePerformer" abstract="true">
        <property name="song" value="Somewhere Over the Rainbow" />
    </bean>
    <!--Теперь создаем исполнителей РАЗНЫХ КЛАССОВ-->
    <bean id="klava" class="springidol.Vocalist"
          parent="basePerformer" />

    <bean id="stevie"
          class="springidol.Instrumentalist"
          parent="basePerformer">
        <property name="instrument" ref="piano" />
    </bean>

    <!--Создаем конфигурационного пианиста-->
    <!--<bean id="pianist"-->
          <!--class="springidol.Instrumentalist"-->
          <!--abstract="true">-->
        <!--<property name="song" value="Chopsticks" />-->
        <!--<property name="instrument">-->
            <!--<bean class="springidol.Piano" />-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="audience"
          class="springidol.Audience" />

    <bean id="magician"
          class="springidol.Magician" />

    <bean id="volunteer"
          class="springidol.Volunteer" />

    <!--<bean id="contestantDelegate"-->
          <!--class="springidol.GraciousContestant" />-->

    <!--*** JDBC ***-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/foodb" />
        <property name="username" value="root" />
        <property name="password" value="root" />
    </bean>

    <bean id="studentDao" class="springidol.StudentJdbcDao">
        <property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>

    <!--***    ***-->

    <aop:config proxy-target-class="true">

        <aop:aspect ref="audience">
            <aop:pointcut id="performance" expression="execution(* springidol.OneManBand.perform(..))"
            /> <!-- Определение среза множества точек сопряжения -->
            <aop:before
                    pointcut-ref="performance"
            method="takeSeats" />
            <aop:before
                    pointcut-ref="performance"
            method="turnOffCellPhones" />
            <aop:after-returning
                    pointcut-ref="performance"
            method="applaud" />
            <aop:after-throwing
                    pointcut-ref="performance"
            method="demandRefund" />
        </aop:aspect>
            <!-- Вызываемый и до и после с замером времени (для класса PoeticJuggler-->
        <aop:aspect ref="audience">
            <aop:pointcut id="performance2" expression="execution(* springidol.PoeticJuggler.perform(..))"
            />
            <aop:around
                    pointcut-ref="performance2"
                    method="watchPerformance" />
        </aop:aspect>
            <!-- Передача параметров для целевого метода -->
        <aop:aspect ref="magician">
            <aop:pointcut id="thinking"
                          expression="execution(*
                           springidol.Thinker.thinkOfSomething(String))
                          and args(thoughts)" />
            <aop:before
                pointcut-ref="thinking"
                method="interceptThoughts"
                arg-names="thoughts" />
        </aop:aspect>
            <!-- Внедрение новых возможностей существующим классам -->
        <aop:aspect>
            <aop:declare-parents types-matching="springidol.Performer+"
                                 implement-interface="springidol.Contestant"
                                 default-impl="springidol.GraciousContestant"
                                 />
                                 <!--delegate-ref="contestantDelegate"-->
        </aop:aspect>

    </aop:config>

    <!-- Попытка внедрения аспекта JudgeAspect через AspectJ
    Для этого в настройках необходимо поменять используемый компилятор на AspectJ
    и прописать путь до архива aspectjtools-1.8.13.jar -->
    <!--<bean id="criticismEngineImpl"-->
          <!--class="springidol.CriticismEngineImpl">-->
        <!--<property name="criticismPool">-->
            <!--<list>-->
                <!--<value>I’m not being rude, but that was appalling.</value>-->
                <!--<value>You may be the least talented-->
                    <!--person in this show.</value>-->
                <!--<value>Do everyone a favor and keep your day job.</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean class="springidol.JudgeAspect" factory-method="aspectOf">-->
    <!--<property name="criticismEngine" ref="criticismEngineImpl" />-->
    <!--</bean>-->

</beans>